// Generated by CoffeeScript 1.3.1

window.SingleView = Backbone.View.extend({
  el: "#content",
  initialize: function() {
    return this.template = tpl.get('single');
  },
  events: {
    "click .tag": "navigateAnchor",
    "focus #controls div": "activate",
    "blur #controls div": "deactivate",
    "click #editbutton": "editInfo",
    "click .window .close": "cancel",
    "click #mask": "cancel",
    "click #single": "random",
    "click .window .report": "report",
    "submit form": "saveInfo",
    "click #flag": "showWindow"
  },
  fetcher: function(callback) {
    var _this = this;
    if (this.model.get("not_fetched")) {
      this.model.fetch({
        success: function() {
          _this.model.set("not_fetched", false);
          return callback();
        }
      });
    } else {
      callback();
    }
  },
  render: function() {
    var _this = this;
    this.fetcher(function() {
      var face, image, resizes, tag, tags, thumb, to_template, _i, _len, _ref;
      face = _this.model.toJSON();
      image = _this.model.getImage();
      thumb = _this.model.getThumb();
      if (face.source) {
        face.source = [
          {
            source: face.source
          }
        ];
      } else {
        face.source = [];
      }
      resizes = [];
      if (face.resizes.huge) {
        resizes.push({
          size: "huge",
          image: face.resizes.huge
        });
      }
      if (face.resizes.large) {
        resizes.push({
          size: "large",
          image: face.resizes.large
        });
      }
      if (face.resizes.medium) {
        resizes.push({
          size: "medium",
          image: face.resizes.medium
        });
      }
      if (face.resizes.small) {
        resizes.push({
          size: "small",
          image: face.resizes.small
        });
      }
      face.resizes = resizes;
      to_template = {
        face: face,
        image: image,
        static_prefix: static_prefix,
        thumb: thumb,
        image_service: app.getImageService()
      };
      _this.$el.html(Mustache.render(_this.template, to_template));
      $(".single").css("max-height", screen.height);
      $(window).scrollTop(0);
      tags = "";
      _ref = face.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        tags += tag.name + ", ";
      }
      return _this.updateMeta(face, tags);
    });
    return this;
  },
  updateTags: function(tags) {
    var taglist;
    taglist = $(this.el).find("#tags");
    taglist.html("");
    return _.each(tags, function(tag) {
      if (tag.name !== "") {
        return taglist.append(new TagView({
          model: new Tag({
            name: tag.name
          })
        }).render().el);
      }
    });
  },
  updateMeta: function(face, tags) {
    $("title").html("Image " + face.id + " - MyLittleFaceWhen");
    $("meta[name=description]").attr("content", "Reaction containing: " + tags);
    $("#og-image").attr("content", face.image);
    if ($("#cd-layout") === []) {
      $("head").append("<meta id='#cd-layout' poperty='cd:layout' content='banner'>");
    }
    if ($("link[rel=image_src]") === []) {
      return $("head").append("<link rel='image_src' href='" + face.image + "'>");
    }
  },
  activate: function(event) {
    return $(event.currentTarget).addClass("activated");
  },
  cancel: function(event) {
    event.preventDefault();
    return $("#mask, .window").hide();
  },
  deactivate: function(event) {
    return $(event.currentTarget).removeClass("activated");
  },
  editInfo: function(event) {
    this.$el.find("#info-show").hide();
    this.$el.find("#info-edit").show();
    return $(document).scrollTop($(document).height());
  },
  random: function(event) {
    event.preventDefault();
    this.undelegateEvents();
    this.$el.html("<div id='loader'><img src='/static/dash.gif' /></div>");
    $("#loader").show();
    return app.random();
  },
  report: function(event) {
    var reason;
    event.preventDefault();
    reason = $(".window textarea").val();
    if (!reason) {
      return;
    }
    this.undelegateEvents();
    return $.ajax({
      type: "POST",
      url: "/api/v2/flag/",
      contentType: "application/json; charset=utf-8",
      data: '{"reason":"' + reason + '"}',
      processData: false,
      success: function() {
        return app.navigate("/f/1221/", true);
      },
      error: function() {
        var info;
        info = $(".window h2");
        info.css("color", "black").css("background-color", "red");
        return info.html("An error has ocurred with this report !");
      }
    });
  },
  saveInfo: function(event) {
    var i, saver, submit_tags, tags,
      _this = this;
    event.preventDefault();
    tags = event.currentTarget[0].value.split(",");
    i = 0;
    while (i < tags.length) {
      tags[i] = $.trim(tags[i]);
      i++;
    }
    $("#loader").show();
    this.$el.find("#info-edit").hide();
    submit_tags = [];
    _.each(tags, function(tag) {
      return submit_tags.push({
        "name": tag
      });
    });
    saver = function() {
      return _this.model.save({
        tags: submit_tags,
        source: event.currentTarget[1].value
      }, {
        success: function() {
          var show;
          _this.updateTags(submit_tags);
          $("#source").html(event.currentTarget[1].value);
          show = function() {
            $("#loader").hide();
            return $("#info-show").show();
          };
          return window.setTimeout(show, 1000);
        }
      });
    };
    if (this.model.isNew()) {
      return this.fetcher(function() {
        return saver();
      });
    } else {
      return saver();
    }
  },
  showWindow: function(event) {
    var id, winH, winW;
    id = "#dialog";
    winH = $(window).height();
    winW = $(window).width();
    $("#mask").css({
      width: winW,
      height: winH
    }).show();
    return $(id).css({
      top: winH / 3,
      left: winW / 2 - $(id).width() / 2
    }).show();
  }
});
